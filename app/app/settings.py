"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import sys

from dotenv import load_dotenv
import os
from datetime import timedelta
from pathlib import Path

from corsheaders.defaults import default_headers

TESTING = 'test' in sys.argv

# Load environment variables from the .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'changeme')
COMPANY_NAME = os.getenv('COMPANY_NAME', 'Default Company Name')
COMPANY_ADDRESS = os.getenv('COMPANY_ADDRESS', 'Default Company Address')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv('DEBUG', 0)))

ALLOWED_HOSTS = list(filter(None, os.getenv('ALLOWED_HOSTS', '').split(',')))

# Incoming Email Settings (IMAP)
IMAP_SERVER = os.getenv('IMAP_SERVER')
IMAP_PORT = int(os.getenv('IMAP_PORT', 993))  # Convert to int
IMAP_USER = os.getenv('IMAP_USER')
IMAP_PASSWORD = os.getenv('IMAP_PASSWORD')

# LOAN
ADVANCEMENT_THRESHOLD_FOR_COMMITTEE_APPROVAL = float(os.getenv("ADVANCEMENT_THRESHOLD_FOR_COMMITTEE_APPROVAL", 1000000))
COMMITTEE_MEMBERS_COUNT_REQUIRED_FOR_APPROVAL = int(os.getenv("COMMITTEE_MEMBERS_COUNT_REQUIRED_FOR_APPROVAL", 1))
if TESTING:
    COMMITTEE_MEMBERS_COUNT_REQUIRED_FOR_APPROVAL = 1

# Encryption key for PPS number
PPS_ENCRYPTION_KEY = os.getenv("PPS_ENCRYPTION_KEY")
if not PPS_ENCRYPTION_KEY:
    raise ValueError("PPS_ENCRYPTION_KEY must be set in the environment.")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    # 'rest_framework.authtoken',
    'drf_spectacular',
    'rangefilter',
    'auditlog',
    'storages',
    'channels',
    'core',
    'user',
    'solicitors_loan',
    'agents_loan',
    'event',
    'comment',
    'expense',
    'loan',
    'notifications',
    'assigned_solicitor',
    'undertaking',
    'downloadableFiles',
    'signed_documents',
    'agents_default_assignments',
    'communications'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'core.middleware.CorsMiddleware',  # Add this
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.CountryMiddleware',
    'core.middleware.LogEventOnErrorMiddleware',
    'core.middleware.LogHeadersMiddleware'
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Retrieve the connection string from Azure environment variables
CONNECTION = os.getenv('AZURE_POSTGRESQL_CONNECTIONSTRING', '')

if CONNECTION:
    # Convert the space-separated key=value string into a dictionary
    CONNECTION_STR = {pair.split('=')[0]: pair.split('=')[1] for pair in CONNECTION.split(' ')}

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": CONNECTION_STR.get("dbname"),
            "HOST": CONNECTION_STR.get("host"),
            "USER": CONNECTION_STR.get("user"),
            "PASSWORD": CONNECTION_STR.get("password"),
            "PORT": CONNECTION_STR.get("port", "5432"),  # Default PostgreSQL port
            "OPTIONS": {
                "sslmode": CONNECTION_STR.get("sslmode", "require"),
            },
        }
    }
else:
    print("⚠️ AZURE_POSTGRESQL_CONNECTIONSTRING is not set!")

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': os.environ.get('DB_HOST'),
            'NAME': os.environ.get('DB_NAME'),
            'USER': os.environ.get('DB_USER'),
            'PASSWORD': os.environ.get('DB_PASS'),
            'PORT': '5432',  # Add the port explicitly
        },
        'test_db': {  # Define your test database
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'your_test_db',
            'USER': 'postgres',
            'PASSWORD': os.environ.get('DB_PASS'),
            'HOST': 'localhost',
            'PORT': '5432',

        },
    }

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [

    {
        'NAME': 'app.validators.MixedCharacterValidator',  # Replace with the actual path
    },
]

# Password Reset Token Expiry
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour (time in seconds)

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Dublin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

if not DEBUG:  # in production

    # Azure settings
    AZURE_ACCOUNT_NAME = os.getenv('AZURE_ACCOUNT_NAME', 'your-default-account-name')
    AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
    AZURE_STORAGE_CONNECTION_STRING = os.getenv('AZURE_STORAGE_CONNECTION_STRING', 'your-default-connection-string')
    AZURE_CONTAINER = os.getenv('AZURE_CONTAINER', 'your-default-container-name')

    DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
    STATICFILES_STORAGE = 'storages.backends.azure_storage.AzureStorage'

    MEDIA_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/"
    STATIC_URL = f"https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/"
    # Set ATTACHMENTS_DIR to point to Azure Blob Storage container path
    ATTACHMENTS_DIR = f"https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/attachments/"

    # Outgoing Email Settings (SMTP)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.getenv('EMAIL_HOST')
    EMAIL_PORT = 465
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = True
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

else:  # in development
    MEDIA_URL = '/media/'
    STATIC_URL = '/static/static/'
    STATICFILES_DIRS = [BASE_DIR / "static"]
    STATIC_ROOT = "staticfiles"
    MEDIA_ROOT = BASE_DIR / "media"
    DOC_DOWNLOAD_DIR = os.path.join(MEDIA_ROOT, 'DocDownload')
    # Set default attachment directory to a subfolder within media
    ATTACHMENTS_DIR = os.path.join(MEDIA_ROOT, 'email_attachments')
    # Your Non-SSL settings
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_USE_TLS = False
    EMAIL_USE_SSL = False
    EMAIL_HOST = 'mail.alife.ie'
    EMAIL_PORT = 26
    EMAIL_HOST_USER = os.getenv('DEFAULT_FROM_EMAIL')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Ensure the local attachments directory exists if in development
if DEBUG:
    os.makedirs(ATTACHMENTS_DIR, exist_ok=True)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'core.User'

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": 'drf_spectacular.openapi.AutoSchema',
    "DEFAULT_AUTHENTICATION_CLASSES": (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

SPECTACULAR_SETTINGS = {
    "COMPONENT_SPLIT_REQUEST": True,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
        'docExpansion': 'list'
    },

}

ASGI_APPLICATION = 'app.routing.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}

CORS_ORIGIN_ALLOW_ALL = True  # If you want to allow all origins, or...
# Specify the headers that are allowed, including the custom 'Country' header


CORS_ALLOW_HEADERS = list(default_headers) + [
    'Country', 'Frontend-Host'  # Adding the custom 'Country' header
]

# CORS_ALLOWED_ORIGINS = [
#     "http://127.0.0.1", "http://127.0.0.1:3000", 'http://localhost:3000',
# ]
